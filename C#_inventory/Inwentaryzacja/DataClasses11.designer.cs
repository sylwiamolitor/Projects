#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inwentaryzacja.Inwentaryzacja.Inwentaryzacja
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="xd2")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertKatedra(Katedra instance);
    partial void UpdateKatedra(Katedra instance);
    partial void DeleteKatedra(Katedra instance);
    partial void InsertZlecenie(Zlecenie instance);
    partial void UpdateZlecenie(Zlecenie instance);
    partial void DeleteZlecenie(Zlecenie instance);
    partial void InsertPomieszczenie(Pomieszczenie instance);
    partial void UpdatePomieszczenie(Pomieszczenie instance);
    partial void DeletePomieszczenie(Pomieszczenie instance);
    partial void InsertSprzęt(Sprzęt instance);
    partial void UpdateSprzęt(Sprzęt instance);
    partial void DeleteSprzęt(Sprzęt instance);
    partial void InsertUżytkownik(Użytkownik instance);
    partial void UpdateUżytkownik(Użytkownik instance);
    partial void DeleteUżytkownik(Użytkownik instance);
    partial void InsertWydział(Wydział instance);
    partial void UpdateWydział(Wydział instance);
    partial void DeleteWydział(Wydział instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Inwentaryzacja.Properties.Settings.Default.xd2ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Katedra> Katedras
		{
			get
			{
				return this.GetTable<Katedra>();
			}
		}
		
		public System.Data.Linq.Table<Zlecenie> Zlecenies
		{
			get
			{
				return this.GetTable<Zlecenie>();
			}
		}
		
		public System.Data.Linq.Table<Pomieszczenie> Pomieszczenies
		{
			get
			{
				return this.GetTable<Pomieszczenie>();
			}
		}
		
		public System.Data.Linq.Table<Sprzęt> Sprzęts
		{
			get
			{
				return this.GetTable<Sprzęt>();
			}
		}
		
		public System.Data.Linq.Table<Użytkownik> Użytkowniks
		{
			get
			{
				return this.GetTable<Użytkownik>();
			}
		}
		
		public System.Data.Linq.Table<Wydział> Wydziałs
		{
			get
			{
				return this.GetTable<Wydział>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Katedra")]
	public partial class Katedra : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_katedry;
		
		private System.Nullable<int> _ID_kierownika_katedry;
		
		private string _nazwa_katedry;
		
		private System.Nullable<int> _Wydział_ID_wydziału;
		
		private EntitySet<Pomieszczenie> _Pomieszczenies;
		
		private EntityRef<Wydział> _Wydział;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_katedryChanging(int value);
    partial void OnID_katedryChanged();
    partial void OnID_kierownika_katedryChanging(System.Nullable<int> value);
    partial void OnID_kierownika_katedryChanged();
    partial void Onnazwa_katedryChanging(string value);
    partial void Onnazwa_katedryChanged();
    partial void OnWydział_ID_wydziałuChanging(System.Nullable<int> value);
    partial void OnWydział_ID_wydziałuChanged();
    #endregion
		
		public Katedra()
		{
			this._Pomieszczenies = new EntitySet<Pomieszczenie>(new Action<Pomieszczenie>(this.attach_Pomieszczenies), new Action<Pomieszczenie>(this.detach_Pomieszczenies));
			this._Wydział = default(EntityRef<Wydział>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_katedry", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_katedry
		{
			get
			{
				return this._ID_katedry;
			}
			set
			{
				if ((this._ID_katedry != value))
				{
					this.OnID_katedryChanging(value);
					this.SendPropertyChanging();
					this._ID_katedry = value;
					this.SendPropertyChanged("ID_katedry");
					this.OnID_katedryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_kierownika_katedry", DbType="Int")]
		public System.Nullable<int> ID_kierownika_katedry
		{
			get
			{
				return this._ID_kierownika_katedry;
			}
			set
			{
				if ((this._ID_kierownika_katedry != value))
				{
					this.OnID_kierownika_katedryChanging(value);
					this.SendPropertyChanging();
					this._ID_kierownika_katedry = value;
					this.SendPropertyChanged("ID_kierownika_katedry");
					this.OnID_kierownika_katedryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nazwa_katedry", DbType="VarChar(50)")]
		public string nazwa_katedry
		{
			get
			{
				return this._nazwa_katedry;
			}
			set
			{
				if ((this._nazwa_katedry != value))
				{
					this.Onnazwa_katedryChanging(value);
					this.SendPropertyChanging();
					this._nazwa_katedry = value;
					this.SendPropertyChanged("nazwa_katedry");
					this.Onnazwa_katedryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wydział_ID_wydziału", DbType="Int")]
		public System.Nullable<int> Wydział_ID_wydziału
		{
			get
			{
				return this._Wydział_ID_wydziału;
			}
			set
			{
				if ((this._Wydział_ID_wydziału != value))
				{
					if (this._Wydział.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWydział_ID_wydziałuChanging(value);
					this.SendPropertyChanging();
					this._Wydział_ID_wydziału = value;
					this.SendPropertyChanged("Wydział_ID_wydziału");
					this.OnWydział_ID_wydziałuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Katedra_Pomieszczenie", Storage="_Pomieszczenies", ThisKey="ID_katedry", OtherKey="Katedra_ID_katedry")]
		public EntitySet<Pomieszczenie> Pomieszczenies
		{
			get
			{
				return this._Pomieszczenies;
			}
			set
			{
				this._Pomieszczenies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Wydział_Katedra", Storage="_Wydział", ThisKey="Wydział_ID_wydziału", OtherKey="ID_wydziału", IsForeignKey=true)]
		public Wydział Wydział
		{
			get
			{
				return this._Wydział.Entity;
			}
			set
			{
				Wydział previousValue = this._Wydział.Entity;
				if (((previousValue != value) 
							|| (this._Wydział.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Wydział.Entity = null;
						previousValue.Katedras.Remove(this);
					}
					this._Wydział.Entity = value;
					if ((value != null))
					{
						value.Katedras.Add(this);
						this._Wydział_ID_wydziału = value.ID_wydziału;
					}
					else
					{
						this._Wydział_ID_wydziału = default(Nullable<int>);
					}
					this.SendPropertyChanged("Wydział");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pomieszczenies(Pomieszczenie entity)
		{
			this.SendPropertyChanging();
			entity.Katedra = this;
		}
		
		private void detach_Pomieszczenies(Pomieszczenie entity)
		{
			this.SendPropertyChanging();
			entity.Katedra = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Zlecenie")]
	public partial class Zlecenie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_zlecenia;
		
		private string _stan;
		
		private int _Użytkownik_ID_użytkownika;
		
		private int _Pomieszczenie_ID_pomieszczenia;
		
		private EntityRef<Pomieszczenie> _Pomieszczenie;
		
		private EntityRef<Użytkownik> _Użytkownik;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_zleceniaChanging(int value);
    partial void Onid_zleceniaChanged();
    partial void OnstanChanging(string value);
    partial void OnstanChanged();
    partial void OnUżytkownik_ID_użytkownikaChanging(int value);
    partial void OnUżytkownik_ID_użytkownikaChanged();
    partial void OnPomieszczenie_ID_pomieszczeniaChanging(int value);
    partial void OnPomieszczenie_ID_pomieszczeniaChanged();
    #endregion
		
		public Zlecenie()
		{
			this._Pomieszczenie = default(EntityRef<Pomieszczenie>);
			this._Użytkownik = default(EntityRef<Użytkownik>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_zlecenia", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_zlecenia
		{
			get
			{
				return this._id_zlecenia;
			}
			set
			{
				if ((this._id_zlecenia != value))
				{
					this.Onid_zleceniaChanging(value);
					this.SendPropertyChanging();
					this._id_zlecenia = value;
					this.SendPropertyChanged("id_zlecenia");
					this.Onid_zleceniaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stan", DbType="VarChar(50)")]
		public string stan
		{
			get
			{
				return this._stan;
			}
			set
			{
				if ((this._stan != value))
				{
					this.OnstanChanging(value);
					this.SendPropertyChanging();
					this._stan = value;
					this.SendPropertyChanged("stan");
					this.OnstanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Użytkownik_ID_użytkownika", DbType="Int NOT NULL")]
		public int Użytkownik_ID_użytkownika
		{
			get
			{
				return this._Użytkownik_ID_użytkownika;
			}
			set
			{
				if ((this._Użytkownik_ID_użytkownika != value))
				{
					if (this._Użytkownik.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUżytkownik_ID_użytkownikaChanging(value);
					this.SendPropertyChanging();
					this._Użytkownik_ID_użytkownika = value;
					this.SendPropertyChanged("Użytkownik_ID_użytkownika");
					this.OnUżytkownik_ID_użytkownikaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pomieszczenie_ID_pomieszczenia", DbType="Int NOT NULL")]
		public int Pomieszczenie_ID_pomieszczenia
		{
			get
			{
				return this._Pomieszczenie_ID_pomieszczenia;
			}
			set
			{
				if ((this._Pomieszczenie_ID_pomieszczenia != value))
				{
					if (this._Pomieszczenie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPomieszczenie_ID_pomieszczeniaChanging(value);
					this.SendPropertyChanging();
					this._Pomieszczenie_ID_pomieszczenia = value;
					this.SendPropertyChanged("Pomieszczenie_ID_pomieszczenia");
					this.OnPomieszczenie_ID_pomieszczeniaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pomieszczenie_Zlecenie", Storage="_Pomieszczenie", ThisKey="Pomieszczenie_ID_pomieszczenia", OtherKey="ID_pomieszczenia", IsForeignKey=true)]
		public Pomieszczenie Pomieszczenie
		{
			get
			{
				return this._Pomieszczenie.Entity;
			}
			set
			{
				Pomieszczenie previousValue = this._Pomieszczenie.Entity;
				if (((previousValue != value) 
							|| (this._Pomieszczenie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pomieszczenie.Entity = null;
						previousValue.Zlecenies.Remove(this);
					}
					this._Pomieszczenie.Entity = value;
					if ((value != null))
					{
						value.Zlecenies.Add(this);
						this._Pomieszczenie_ID_pomieszczenia = value.ID_pomieszczenia;
					}
					else
					{
						this._Pomieszczenie_ID_pomieszczenia = default(int);
					}
					this.SendPropertyChanged("Pomieszczenie");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Użytkownik_Zlecenie", Storage="_Użytkownik", ThisKey="Użytkownik_ID_użytkownika", OtherKey="ID_użytkownika", IsForeignKey=true)]
		public Użytkownik Użytkownik
		{
			get
			{
				return this._Użytkownik.Entity;
			}
			set
			{
				Użytkownik previousValue = this._Użytkownik.Entity;
				if (((previousValue != value) 
							|| (this._Użytkownik.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Użytkownik.Entity = null;
						previousValue.Zlecenies.Remove(this);
					}
					this._Użytkownik.Entity = value;
					if ((value != null))
					{
						value.Zlecenies.Add(this);
						this._Użytkownik_ID_użytkownika = value.ID_użytkownika;
					}
					else
					{
						this._Użytkownik_ID_użytkownika = default(int);
					}
					this.SendPropertyChanged("Użytkownik");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pomieszczenie")]
	public partial class Pomieszczenie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_pomieszczenia;
		
		private System.Nullable<int> _numer_pokoju;
		
		private int _Katedra_ID_katedry;
		
		private string _typ_pomieszczenia;
		
		private System.Nullable<int> _Wydział_ID_wydziału;
		
		private EntitySet<Zlecenie> _Zlecenies;
		
		private EntitySet<Sprzęt> _Sprzęts;
		
		private EntitySet<Użytkownik> _Użytkowniks;
		
		private EntitySet<Użytkownik> _Użytkowniks1;
		
		private EntityRef<Katedra> _Katedra;
		
		private EntityRef<Wydział> _Wydział;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_pomieszczeniaChanging(int value);
    partial void OnID_pomieszczeniaChanged();
    partial void Onnumer_pokojuChanging(System.Nullable<int> value);
    partial void Onnumer_pokojuChanged();
    partial void OnKatedra_ID_katedryChanging(int value);
    partial void OnKatedra_ID_katedryChanged();
    partial void Ontyp_pomieszczeniaChanging(string value);
    partial void Ontyp_pomieszczeniaChanged();
    partial void OnWydział_ID_wydziałuChanging(System.Nullable<int> value);
    partial void OnWydział_ID_wydziałuChanged();
    #endregion
		
		public Pomieszczenie()
		{
			this._Zlecenies = new EntitySet<Zlecenie>(new Action<Zlecenie>(this.attach_Zlecenies), new Action<Zlecenie>(this.detach_Zlecenies));
			this._Sprzęts = new EntitySet<Sprzęt>(new Action<Sprzęt>(this.attach_Sprzęts), new Action<Sprzęt>(this.detach_Sprzęts));
			this._Użytkowniks = new EntitySet<Użytkownik>(new Action<Użytkownik>(this.attach_Użytkowniks), new Action<Użytkownik>(this.detach_Użytkowniks));
			this._Użytkowniks1 = new EntitySet<Użytkownik>(new Action<Użytkownik>(this.attach_Użytkowniks1), new Action<Użytkownik>(this.detach_Użytkowniks1));
			this._Katedra = default(EntityRef<Katedra>);
			this._Wydział = default(EntityRef<Wydział>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_pomieszczenia", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_pomieszczenia
		{
			get
			{
				return this._ID_pomieszczenia;
			}
			set
			{
				if ((this._ID_pomieszczenia != value))
				{
					this.OnID_pomieszczeniaChanging(value);
					this.SendPropertyChanging();
					this._ID_pomieszczenia = value;
					this.SendPropertyChanged("ID_pomieszczenia");
					this.OnID_pomieszczeniaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numer_pokoju", DbType="Int")]
		public System.Nullable<int> numer_pokoju
		{
			get
			{
				return this._numer_pokoju;
			}
			set
			{
				if ((this._numer_pokoju != value))
				{
					this.Onnumer_pokojuChanging(value);
					this.SendPropertyChanging();
					this._numer_pokoju = value;
					this.SendPropertyChanged("numer_pokoju");
					this.Onnumer_pokojuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Katedra_ID_katedry", DbType="Int NOT NULL")]
		public int Katedra_ID_katedry
		{
			get
			{
				return this._Katedra_ID_katedry;
			}
			set
			{
				if ((this._Katedra_ID_katedry != value))
				{
					if (this._Katedra.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKatedra_ID_katedryChanging(value);
					this.SendPropertyChanging();
					this._Katedra_ID_katedry = value;
					this.SendPropertyChanged("Katedra_ID_katedry");
					this.OnKatedra_ID_katedryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typ_pomieszczenia", DbType="VarChar(50)")]
		public string typ_pomieszczenia
		{
			get
			{
				return this._typ_pomieszczenia;
			}
			set
			{
				if ((this._typ_pomieszczenia != value))
				{
					this.Ontyp_pomieszczeniaChanging(value);
					this.SendPropertyChanging();
					this._typ_pomieszczenia = value;
					this.SendPropertyChanged("typ_pomieszczenia");
					this.Ontyp_pomieszczeniaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wydział_ID_wydziału", DbType="Int")]
		public System.Nullable<int> Wydział_ID_wydziału
		{
			get
			{
				return this._Wydział_ID_wydziału;
			}
			set
			{
				if ((this._Wydział_ID_wydziału != value))
				{
					if (this._Wydział.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWydział_ID_wydziałuChanging(value);
					this.SendPropertyChanging();
					this._Wydział_ID_wydziału = value;
					this.SendPropertyChanged("Wydział_ID_wydziału");
					this.OnWydział_ID_wydziałuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pomieszczenie_Zlecenie", Storage="_Zlecenies", ThisKey="ID_pomieszczenia", OtherKey="Pomieszczenie_ID_pomieszczenia")]
		public EntitySet<Zlecenie> Zlecenies
		{
			get
			{
				return this._Zlecenies;
			}
			set
			{
				this._Zlecenies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pomieszczenie_Sprzęt", Storage="_Sprzęts", ThisKey="ID_pomieszczenia", OtherKey="Pomieszczenie_ID_pomieszczenia")]
		public EntitySet<Sprzęt> Sprzęts
		{
			get
			{
				return this._Sprzęts;
			}
			set
			{
				this._Sprzęts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pomieszczenie_Użytkownik", Storage="_Użytkowniks", ThisKey="ID_pomieszczenia", OtherKey="Pomieszczenie_ID_pomieszczenia")]
		public EntitySet<Użytkownik> Użytkowniks
		{
			get
			{
				return this._Użytkowniks;
			}
			set
			{
				this._Użytkowniks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pomieszczenie_Użytkownik1", Storage="_Użytkowniks1", ThisKey="ID_pomieszczenia", OtherKey="Pomieszczenie_ID_pomieszczenia1")]
		public EntitySet<Użytkownik> Użytkowniks1
		{
			get
			{
				return this._Użytkowniks1;
			}
			set
			{
				this._Użytkowniks1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Katedra_Pomieszczenie", Storage="_Katedra", ThisKey="Katedra_ID_katedry", OtherKey="ID_katedry", IsForeignKey=true)]
		public Katedra Katedra
		{
			get
			{
				return this._Katedra.Entity;
			}
			set
			{
				Katedra previousValue = this._Katedra.Entity;
				if (((previousValue != value) 
							|| (this._Katedra.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Katedra.Entity = null;
						previousValue.Pomieszczenies.Remove(this);
					}
					this._Katedra.Entity = value;
					if ((value != null))
					{
						value.Pomieszczenies.Add(this);
						this._Katedra_ID_katedry = value.ID_katedry;
					}
					else
					{
						this._Katedra_ID_katedry = default(int);
					}
					this.SendPropertyChanged("Katedra");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Wydział_Pomieszczenie", Storage="_Wydział", ThisKey="Wydział_ID_wydziału", OtherKey="ID_wydziału", IsForeignKey=true)]
		public Wydział Wydział
		{
			get
			{
				return this._Wydział.Entity;
			}
			set
			{
				Wydział previousValue = this._Wydział.Entity;
				if (((previousValue != value) 
							|| (this._Wydział.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Wydział.Entity = null;
						previousValue.Pomieszczenies.Remove(this);
					}
					this._Wydział.Entity = value;
					if ((value != null))
					{
						value.Pomieszczenies.Add(this);
						this._Wydział_ID_wydziału = value.ID_wydziału;
					}
					else
					{
						this._Wydział_ID_wydziału = default(Nullable<int>);
					}
					this.SendPropertyChanged("Wydział");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Zlecenies(Zlecenie entity)
		{
			this.SendPropertyChanging();
			entity.Pomieszczenie = this;
		}
		
		private void detach_Zlecenies(Zlecenie entity)
		{
			this.SendPropertyChanging();
			entity.Pomieszczenie = null;
		}
		
		private void attach_Sprzęts(Sprzęt entity)
		{
			this.SendPropertyChanging();
			entity.Pomieszczenie = this;
		}
		
		private void detach_Sprzęts(Sprzęt entity)
		{
			this.SendPropertyChanging();
			entity.Pomieszczenie = null;
		}
		
		private void attach_Użytkowniks(Użytkownik entity)
		{
			this.SendPropertyChanging();
			entity.Pomieszczenie = this;
		}
		
		private void detach_Użytkowniks(Użytkownik entity)
		{
			this.SendPropertyChanging();
			entity.Pomieszczenie = null;
		}
		
		private void attach_Użytkowniks1(Użytkownik entity)
		{
			this.SendPropertyChanging();
			entity.Pomieszczenie1 = this;
		}
		
		private void detach_Użytkowniks1(Użytkownik entity)
		{
			this.SendPropertyChanging();
			entity.Pomieszczenie1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sprzęt")]
	public partial class Sprzęt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_sprzętu;
		
		private string _nazwa_sprzętu;
		
		private string _stan;
		
		private System.Nullable<int> _Pomieszczenie_ID_pomieszczenia;
		
		private System.Nullable<int> _numer_inwentaryzacyjny;
		
		private EntityRef<Pomieszczenie> _Pomieszczenie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_sprzętuChanging(int value);
    partial void OnID_sprzętuChanged();
    partial void Onnazwa_sprzętuChanging(string value);
    partial void Onnazwa_sprzętuChanged();
    partial void OnstanChanging(string value);
    partial void OnstanChanged();
    partial void OnPomieszczenie_ID_pomieszczeniaChanging(System.Nullable<int> value);
    partial void OnPomieszczenie_ID_pomieszczeniaChanged();
    partial void Onnumer_inwentaryzacyjnyChanging(System.Nullable<int> value);
    partial void Onnumer_inwentaryzacyjnyChanged();
    #endregion
		
		public Sprzęt()
		{
			this._Pomieszczenie = default(EntityRef<Pomieszczenie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_sprzętu", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_sprzętu
		{
			get
			{
				return this._ID_sprzętu;
			}
			set
			{
				if ((this._ID_sprzętu != value))
				{
					this.OnID_sprzętuChanging(value);
					this.SendPropertyChanging();
					this._ID_sprzętu = value;
					this.SendPropertyChanged("ID_sprzętu");
					this.OnID_sprzętuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nazwa_sprzętu", DbType="VarChar(50)")]
		public string nazwa_sprzętu
		{
			get
			{
				return this._nazwa_sprzętu;
			}
			set
			{
				if ((this._nazwa_sprzętu != value))
				{
					this.Onnazwa_sprzętuChanging(value);
					this.SendPropertyChanging();
					this._nazwa_sprzętu = value;
					this.SendPropertyChanged("nazwa_sprzętu");
					this.Onnazwa_sprzętuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stan", DbType="VarChar(50)")]
		public string stan
		{
			get
			{
				return this._stan;
			}
			set
			{
				if ((this._stan != value))
				{
					this.OnstanChanging(value);
					this.SendPropertyChanging();
					this._stan = value;
					this.SendPropertyChanged("stan");
					this.OnstanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pomieszczenie_ID_pomieszczenia", DbType="Int")]
		public System.Nullable<int> Pomieszczenie_ID_pomieszczenia
		{
			get
			{
				return this._Pomieszczenie_ID_pomieszczenia;
			}
			set
			{
				if ((this._Pomieszczenie_ID_pomieszczenia != value))
				{
					if (this._Pomieszczenie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPomieszczenie_ID_pomieszczeniaChanging(value);
					this.SendPropertyChanging();
					this._Pomieszczenie_ID_pomieszczenia = value;
					this.SendPropertyChanged("Pomieszczenie_ID_pomieszczenia");
					this.OnPomieszczenie_ID_pomieszczeniaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numer_inwentaryzacyjny", DbType="Int")]
		public System.Nullable<int> numer_inwentaryzacyjny
		{
			get
			{
				return this._numer_inwentaryzacyjny;
			}
			set
			{
				if ((this._numer_inwentaryzacyjny != value))
				{
					this.Onnumer_inwentaryzacyjnyChanging(value);
					this.SendPropertyChanging();
					this._numer_inwentaryzacyjny = value;
					this.SendPropertyChanged("numer_inwentaryzacyjny");
					this.Onnumer_inwentaryzacyjnyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pomieszczenie_Sprzęt", Storage="_Pomieszczenie", ThisKey="Pomieszczenie_ID_pomieszczenia", OtherKey="ID_pomieszczenia", IsForeignKey=true)]
		public Pomieszczenie Pomieszczenie
		{
			get
			{
				return this._Pomieszczenie.Entity;
			}
			set
			{
				Pomieszczenie previousValue = this._Pomieszczenie.Entity;
				if (((previousValue != value) 
							|| (this._Pomieszczenie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pomieszczenie.Entity = null;
						previousValue.Sprzęts.Remove(this);
					}
					this._Pomieszczenie.Entity = value;
					if ((value != null))
					{
						value.Sprzęts.Add(this);
						this._Pomieszczenie_ID_pomieszczenia = value.ID_pomieszczenia;
					}
					else
					{
						this._Pomieszczenie_ID_pomieszczenia = default(Nullable<int>);
					}
					this.SendPropertyChanged("Pomieszczenie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Użytkownik")]
	public partial class Użytkownik : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_użytkownika;
		
		private string _login;
		
		private string _hasło;
		
		private string _nazwa_stanowiska;
		
		private System.Nullable<int> _Pomieszczenie_ID_pomieszczenia;
		
		private System.Nullable<int> _Pomieszczenie_ID_pomieszczenia1;
		
		private EntitySet<Zlecenie> _Zlecenies;
		
		private EntityRef<Pomieszczenie> _Pomieszczenie;
		
		private EntityRef<Pomieszczenie> _Pomieszczenie1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_użytkownikaChanging(int value);
    partial void OnID_użytkownikaChanged();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void OnhasłoChanging(string value);
    partial void OnhasłoChanged();
    partial void Onnazwa_stanowiskaChanging(string value);
    partial void Onnazwa_stanowiskaChanged();
    partial void OnPomieszczenie_ID_pomieszczeniaChanging(System.Nullable<int> value);
    partial void OnPomieszczenie_ID_pomieszczeniaChanged();
    partial void OnPomieszczenie_ID_pomieszczenia1Changing(System.Nullable<int> value);
    partial void OnPomieszczenie_ID_pomieszczenia1Changed();
    #endregion
		
		public Użytkownik()
		{
			this._Zlecenies = new EntitySet<Zlecenie>(new Action<Zlecenie>(this.attach_Zlecenies), new Action<Zlecenie>(this.detach_Zlecenies));
			this._Pomieszczenie = default(EntityRef<Pomieszczenie>);
			this._Pomieszczenie1 = default(EntityRef<Pomieszczenie>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_użytkownika", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_użytkownika
		{
			get
			{
				return this._ID_użytkownika;
			}
			set
			{
				if ((this._ID_użytkownika != value))
				{
					this.OnID_użytkownikaChanging(value);
					this.SendPropertyChanging();
					this._ID_użytkownika = value;
					this.SendPropertyChanged("ID_użytkownika");
					this.OnID_użytkownikaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="VarChar(50)")]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hasło", DbType="VarChar(50)")]
		public string hasło
		{
			get
			{
				return this._hasło;
			}
			set
			{
				if ((this._hasło != value))
				{
					this.OnhasłoChanging(value);
					this.SendPropertyChanging();
					this._hasło = value;
					this.SendPropertyChanged("hasło");
					this.OnhasłoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nazwa_stanowiska", DbType="VarChar(50)")]
		public string nazwa_stanowiska
		{
			get
			{
				return this._nazwa_stanowiska;
			}
			set
			{
				if ((this._nazwa_stanowiska != value))
				{
					this.Onnazwa_stanowiskaChanging(value);
					this.SendPropertyChanging();
					this._nazwa_stanowiska = value;
					this.SendPropertyChanged("nazwa_stanowiska");
					this.Onnazwa_stanowiskaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pomieszczenie_ID_pomieszczenia", DbType="Int")]
		public System.Nullable<int> Pomieszczenie_ID_pomieszczenia
		{
			get
			{
				return this._Pomieszczenie_ID_pomieszczenia;
			}
			set
			{
				if ((this._Pomieszczenie_ID_pomieszczenia != value))
				{
					if (this._Pomieszczenie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPomieszczenie_ID_pomieszczeniaChanging(value);
					this.SendPropertyChanging();
					this._Pomieszczenie_ID_pomieszczenia = value;
					this.SendPropertyChanged("Pomieszczenie_ID_pomieszczenia");
					this.OnPomieszczenie_ID_pomieszczeniaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pomieszczenie_ID_pomieszczenia1", DbType="Int")]
		public System.Nullable<int> Pomieszczenie_ID_pomieszczenia1
		{
			get
			{
				return this._Pomieszczenie_ID_pomieszczenia1;
			}
			set
			{
				if ((this._Pomieszczenie_ID_pomieszczenia1 != value))
				{
					if (this._Pomieszczenie1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPomieszczenie_ID_pomieszczenia1Changing(value);
					this.SendPropertyChanging();
					this._Pomieszczenie_ID_pomieszczenia1 = value;
					this.SendPropertyChanged("Pomieszczenie_ID_pomieszczenia1");
					this.OnPomieszczenie_ID_pomieszczenia1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Użytkownik_Zlecenie", Storage="_Zlecenies", ThisKey="ID_użytkownika", OtherKey="Użytkownik_ID_użytkownika")]
		public EntitySet<Zlecenie> Zlecenies
		{
			get
			{
				return this._Zlecenies;
			}
			set
			{
				this._Zlecenies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pomieszczenie_Użytkownik", Storage="_Pomieszczenie", ThisKey="Pomieszczenie_ID_pomieszczenia", OtherKey="ID_pomieszczenia", IsForeignKey=true)]
		public Pomieszczenie Pomieszczenie
		{
			get
			{
				return this._Pomieszczenie.Entity;
			}
			set
			{
				Pomieszczenie previousValue = this._Pomieszczenie.Entity;
				if (((previousValue != value) 
							|| (this._Pomieszczenie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pomieszczenie.Entity = null;
						previousValue.Użytkowniks.Remove(this);
					}
					this._Pomieszczenie.Entity = value;
					if ((value != null))
					{
						value.Użytkowniks.Add(this);
						this._Pomieszczenie_ID_pomieszczenia = value.ID_pomieszczenia;
					}
					else
					{
						this._Pomieszczenie_ID_pomieszczenia = default(Nullable<int>);
					}
					this.SendPropertyChanged("Pomieszczenie");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pomieszczenie_Użytkownik1", Storage="_Pomieszczenie1", ThisKey="Pomieszczenie_ID_pomieszczenia1", OtherKey="ID_pomieszczenia", IsForeignKey=true)]
		public Pomieszczenie Pomieszczenie1
		{
			get
			{
				return this._Pomieszczenie1.Entity;
			}
			set
			{
				Pomieszczenie previousValue = this._Pomieszczenie1.Entity;
				if (((previousValue != value) 
							|| (this._Pomieszczenie1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pomieszczenie1.Entity = null;
						previousValue.Użytkowniks1.Remove(this);
					}
					this._Pomieszczenie1.Entity = value;
					if ((value != null))
					{
						value.Użytkowniks1.Add(this);
						this._Pomieszczenie_ID_pomieszczenia1 = value.ID_pomieszczenia;
					}
					else
					{
						this._Pomieszczenie_ID_pomieszczenia1 = default(Nullable<int>);
					}
					this.SendPropertyChanged("Pomieszczenie1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Zlecenies(Zlecenie entity)
		{
			this.SendPropertyChanging();
			entity.Użytkownik = this;
		}
		
		private void detach_Zlecenies(Zlecenie entity)
		{
			this.SendPropertyChanging();
			entity.Użytkownik = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Wydział")]
	public partial class Wydział : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_wydziału;
		
		private System.Nullable<int> _ID_kierownika_wydziału;
		
		private string _nazwa_wydziału;
		
		private EntitySet<Katedra> _Katedras;
		
		private EntitySet<Pomieszczenie> _Pomieszczenies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_wydziałuChanging(int value);
    partial void OnID_wydziałuChanged();
    partial void OnID_kierownika_wydziałuChanging(System.Nullable<int> value);
    partial void OnID_kierownika_wydziałuChanged();
    partial void Onnazwa_wydziałuChanging(string value);
    partial void Onnazwa_wydziałuChanged();
    #endregion
		
		public Wydział()
		{
			this._Katedras = new EntitySet<Katedra>(new Action<Katedra>(this.attach_Katedras), new Action<Katedra>(this.detach_Katedras));
			this._Pomieszczenies = new EntitySet<Pomieszczenie>(new Action<Pomieszczenie>(this.attach_Pomieszczenies), new Action<Pomieszczenie>(this.detach_Pomieszczenies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_wydziału", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_wydziału
		{
			get
			{
				return this._ID_wydziału;
			}
			set
			{
				if ((this._ID_wydziału != value))
				{
					this.OnID_wydziałuChanging(value);
					this.SendPropertyChanging();
					this._ID_wydziału = value;
					this.SendPropertyChanged("ID_wydziału");
					this.OnID_wydziałuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_kierownika_wydziału", DbType="Int")]
		public System.Nullable<int> ID_kierownika_wydziału
		{
			get
			{
				return this._ID_kierownika_wydziału;
			}
			set
			{
				if ((this._ID_kierownika_wydziału != value))
				{
					this.OnID_kierownika_wydziałuChanging(value);
					this.SendPropertyChanging();
					this._ID_kierownika_wydziału = value;
					this.SendPropertyChanged("ID_kierownika_wydziału");
					this.OnID_kierownika_wydziałuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nazwa_wydziału", DbType="VarChar(50)")]
		public string nazwa_wydziału
		{
			get
			{
				return this._nazwa_wydziału;
			}
			set
			{
				if ((this._nazwa_wydziału != value))
				{
					this.Onnazwa_wydziałuChanging(value);
					this.SendPropertyChanging();
					this._nazwa_wydziału = value;
					this.SendPropertyChanged("nazwa_wydziału");
					this.Onnazwa_wydziałuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Wydział_Katedra", Storage="_Katedras", ThisKey="ID_wydziału", OtherKey="Wydział_ID_wydziału")]
		public EntitySet<Katedra> Katedras
		{
			get
			{
				return this._Katedras;
			}
			set
			{
				this._Katedras.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Wydział_Pomieszczenie", Storage="_Pomieszczenies", ThisKey="ID_wydziału", OtherKey="Wydział_ID_wydziału")]
		public EntitySet<Pomieszczenie> Pomieszczenies
		{
			get
			{
				return this._Pomieszczenies;
			}
			set
			{
				this._Pomieszczenies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Katedras(Katedra entity)
		{
			this.SendPropertyChanging();
			entity.Wydział = this;
		}
		
		private void detach_Katedras(Katedra entity)
		{
			this.SendPropertyChanging();
			entity.Wydział = null;
		}
		
		private void attach_Pomieszczenies(Pomieszczenie entity)
		{
			this.SendPropertyChanging();
			entity.Wydział = this;
		}
		
		private void detach_Pomieszczenies(Pomieszczenie entity)
		{
			this.SendPropertyChanging();
			entity.Wydział = null;
		}
	}
}
#pragma warning restore 1591
